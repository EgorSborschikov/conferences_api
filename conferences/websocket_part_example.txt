# Структура для хранения активных соединений
connected_clients = {}

# Обработка WebSocket-соединения
# Подключение клиентов к комнате и передача сообщений через ConnectionManager
async def handler(websocket, path):
    room_id = path.split('/')[-1]
    await manager.connect(websocket, room_id)

    try:
        async for message in websocket:
            await manager.broadcast(room_id, message)
    finally:
        manager.disconnect(websocket, room_id)

async def start_websocket_server():
    async with websockets.serve(handler, "0.0.0.0", 8765):
        await asyncio.Future()  # Бесконечное ожидание для поддержания сервера активным

server_task = None

# События, управляющие запуском и отстановкой WebSocket-сервера
@app.on_event("startup")
async def startup_event():
    global server_task
    server_task = asyncio.create_task(start_websocket_server())

@app.on_event("shutdown")
async def shutdown_event():
    global server_task
    if server_task:
        server_task.cancel()
        await server_task

# Прием бинарных данных (аудио и видео) от участника и передача их остальным участникам комнаты
@router.websocket("/ws/publish/{room_id}")
async def websocket_publish(websocket: WebSocket, room_id: str):
    await manager.connect(websocket, room_id)
    active_streams[room_id] = websocket

    try:
        while True:
            data = await websocket.receive_bytes() # Получение бинарных данных
            await manager.broadcast(room_id, data) # Передача данных всем участникам комнаты
    
    except Exception as e:
        logger.info(f"Ошибка Websocket: {e}")

    finally:
        del active_conferences[room_id]
        manager.disconnect(websocket, room_id)

# Поддержка соединения и получение данных от сервера
@router.websocket("/ws/play/{room_id}")
async def websocket_play(websocket: WebSocket, room_id: str):
    await manager.connect(websocket, room_id)

    try:
        while True:
            await websocket.receive_text() # Ожидаем сообщения, чтобы поддерживать соединение

    except Exception as e:
        logger.info(f"Ошибка Websocket: {e}")
    
    finally:
        manager.disconnect(websocket, room_id)

# WebSocket конечная точка для обмена сообщениями в реальном времени
@router.websocket("/ws/{room_id}")
async def websocket_endpoint(websocket: WebSocket, room_id: str):
    # Подключение WebSocket клиента
    await manager.connect(websocket, room_id)
    
    try:
        # Цикл для получения сообщений от клиента
        while True:
            data = await websocket.receive_text()

            # Трансляция сообщения всем участникам комнаты
            await manager.broadcast(room_id, f"Комната {room_id}: {data}")

    except Exception as e:
        # Логирование ошибки и отключение WebSocket клиента
        print(f"Ошибка WebSocket: {e}")

    finally:
        manager.disconnect(websocket, room_id)